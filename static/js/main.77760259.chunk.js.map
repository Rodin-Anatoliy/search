{"version":3,"sources":["components/user/User.tsx","components/results/Results.tsx","images/search.svg","components/bar/Bar.tsx","modules/Api.jsx","components/search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["User","name","nick","avatar","onClick","React","useState","image","setImage","img","Image","src","onload","width","height","onerror","renderImageSecurity","className","e","alt","Results","errorMessage","inputValue","setInputValue","willClear","setWillClear","users","isSent","isLoad","userClickHandler","event","preventDefault","usersList","map","user","where","what","result","i","length","toLowerCase","includes","matches","username","photo","id","errorMessageText","Bar","setIsSent","setIsLoad","onSubmit","type","lens","value","autoComplete","onFocus","onInput","currentTarget","inputHandler","placeholder","NewsApi","constants","this","url","key","dayFrom","dayTo","today","Date","parse","fetch","then","res","ok","json","Promise","reject","console","log","status","query","dateTo","dateFrom","getFullYear","getMonth","getDate","Search","userInfo","setUresInfo","error","setError","Api","useEffect","bodyClickHandler","target","HTMLElement","closest","document","body","addEventListener","removeEventListener","getLastNews","news","articles","item","index","title","source","urlToImage","setTimeout","catch","err","getNews","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.77760259.chunk.js","sourcesContent":["import React, {FC} from 'react';\r\nimport './User.css';\r\n\r\ninterface UserProps {\r\n    name: string;\r\n    nick: string;\r\n    avatar: string;\r\n    onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>, name: string) => void;\r\n}\r\nconst User: FC<UserProps> = \r\n    ({\r\n        name,\r\n        nick,\r\n        avatar,\r\n        onClick\r\n    }) => {\r\n\r\n    const [image, setImage] = React.useState(avatar);\r\n\r\n    const renderImageSecurity = (avatar: string) => {\r\n        const img = new Image;\r\n        img.src = `${avatar}`;\r\n        img.onload = function(){\r\n            (img.width && img.height === 0) && setImage('https://bugaga.ru/uploads/posts/2017-03/1489052030_kotik-hosiko-12.jpg')\r\n        }\r\n        img.onerror = function(){\r\n            setImage('https://bugaga.ru/uploads/posts/2017-03/1489052030_kotik-hosiko-12.jpg')\r\n        }\r\n    }\r\n\r\n    renderImageSecurity(avatar);\r\n\r\n    return (\r\n      <div className=\"User\" onClick={(e) => {onClick && onClick(e, name)}}>\r\n          <div className=\"User__avatar\">\r\n              <img className=\"User__img\" src={image} alt=\"User avatar\"/>\r\n          </div>\r\n          <div className=\"User__info\">\r\n              <p className=\"User__name\">{name}</p>\r\n              <p className=\"User__nick\">{nick}</p>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React, {FC} from 'react';\r\nimport './Results.css';\r\nimport User from '../user/User';\r\nimport {IUser, IPhoto} from '../../types/types'\r\n\r\ninterface ResultsProps {\r\n    errorMessage?: string;\r\n    inputValue: string;\r\n    setInputValue?: (value: string) => void;\r\n    willClear?: boolean;\r\n    setWillClear?: (value: boolean) => void;\r\n    users?: any;\r\n    isSent?: boolean;\r\n    isLoad?: boolean;\r\n}\r\n\r\nconst Results : FC<ResultsProps> = \r\n    ({\r\n        errorMessage,\r\n        inputValue,\r\n        setInputValue,\r\n        willClear,\r\n        setWillClear,\r\n        users,\r\n        isSent,\r\n        isLoad\r\n    }) => {\r\n\r\n    const matches = (where: any, what: string) => {\r\n        let result = false;\r\n        for (let i=0; i < where.length; i++) {\r\n            if (where[i].toLowerCase().includes(what.toLowerCase())) {\r\n                result = true;\r\n                break\r\n            } \r\n        }\r\n        return result\r\n    }\r\n\r\n    const userClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, name: string) => {\r\n        event.preventDefault();\r\n        setInputValue && setInputValue(name);\r\n        setWillClear && setWillClear(true);\r\n    }\r\n\r\n    const usersList = isLoad && users && users.map((user: any) => {\r\n        if (matches([user.username, user.name], inputValue)) {\r\n            const photo = typeof user.photo === \"string\" ? user.photo : 'https://bugaga.ru/uploads/posts/2017-03/1489052030_kotik-hosiko-12.jpg';\r\n            return <User\r\n                onClick={userClickHandler}\r\n                name={user.name}\r\n                nick={user.username}\r\n                avatar={photo}\r\n                key={user.id}\r\n            />\r\n        } else {return null}\r\n    });\r\n\r\n\r\n\r\n    const errorMessageText = `${errorMessage}`;\r\n    \r\n    return (\r\n      <div className={isSent ? \"Results Results__preloader\" : \"Results\"}>\r\n          {isLoad && !willClear && !errorMessage && usersList}\r\n          {!!errorMessage && (<p className=\"Results__error\">{errorMessageText}</p>)}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Results;","export default __webpack_public_path__ + \"static/media/search.273f4b09.svg\";","import React, {FC} from 'react';\r\nimport './Bar.css';\r\nimport lens from '../../images/search.svg';\r\n\r\ninterface BarProps {\r\n    setIsSent?: (value: boolean) => void;\r\n    setIsLoad?: (value: boolean) => void;\r\n    setWillClear?: (value: boolean) => void;\r\n    setInputValue?: (value: string) => void;\r\n    inputValue?: string;\r\n}\r\n\r\nconst Bar: FC<BarProps> =\r\n    ({\r\n        setIsSent,\r\n        setIsLoad,\r\n        setWillClear,\r\n        setInputValue,\r\n        inputValue\r\n    }) => {\r\n\r\n    const focusHandler = () => {\r\n        setIsSent && setIsSent(true);\r\n        setIsLoad && setIsLoad(false);\r\n        setWillClear && setWillClear(false);\r\n    }\r\n\r\n    const inputHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        setIsSent && setIsSent(true);\r\n        setIsLoad && setIsLoad(false);\r\n        setWillClear && setWillClear(false);\r\n        setInputValue && setInputValue(value);\r\n    }\r\n\r\n    const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form className=\"Bar\" onSubmit={(e) => submitHandler(e)}>\r\n            <button type=\"submit\" className=\"Bar__submit\">\r\n                <img className=\"Bar__icon\" src={lens} alt=\"search icon\"/>\r\n            </button>\r\n            \r\n            <input \r\n                value={inputValue}\r\n                autoComplete=\"off\"\r\n                onFocus={() => {focusHandler()}}\r\n                onInput={(e) => {inputHandler(e)}}\r\n                name=\"text\"\r\n                type=\"text\"\r\n                className=\"Bar__input\"\r\n                placeholder=\"Search\"\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Bar;","export class NewsApi {\r\n    constructor(constants) {\r\n        this.url = constants.url;\r\n        this.key = constants.key;\r\n    }\r\n\r\n    getLastNews(dayFrom = 6, dayTo = 0) {\r\n        const today = new Date();\r\n        const dateTo = new Date(Date.parse(today) - dayTo * 86400000);\r\n        const dateFrom = new Date(Date.parse(today) - dayFrom * 86400000);\r\n        return fetch(`${this.url}top-headlines?country=ru&pageSize=10&apiKey=${this.key}`)\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(console.log(`Ошибка: ${res.status}`));\r\n        });\r\n    }\r\n    \r\n    getNews(query, dayFrom = 6, dayTo = 0) {\r\n        const today = new Date();\r\n        const dateTo = new Date(Date.parse(today) - dayTo * 86400000);\r\n        const dateFrom = new Date(Date.parse(today) - dayFrom * 86400000);\r\n        return fetch(`${this.url}everything?q=${query}&from=${dateTo.getFullYear()}-${dateTo.getMonth() + 1}-${dateTo.getDate()}&to=${dateFrom.getFullYear()}-${dateFrom.getMonth() + 1}-${dateFrom.getDate()}&sortBy=publishedAt&pageSize=100&apiKey=${this.key}`)\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(console.log(`Ошибка: ${res.status}`));\r\n        });\r\n    }\r\n}","import React, {FC} from 'react';\r\nimport './Search.css';\r\nimport {IUser, IPhoto} from \"../../types/types\"\r\nimport Results from '../results/Results';\r\nimport Bar from '../bar/Bar';\r\nimport {NewsApi} from '../../modules/Api'\r\n\r\ninterface SearchProps {\r\n\r\n}\r\n\r\nconst Search: FC<SearchProps> = \r\n    ({}) => {\r\n    \r\n    const [isSent, setIsSent] = React.useState(false);      // Отслеживание отправки запроса\r\n    const [isLoad, setIsLoad] = React.useState(false);      // Отслеживание загрузки ответа \r\n    const [userInfo, setUresInfo] = React.useState([])    // Данные пользователя\r\n    const [willClear, setWillClear] = React.useState(false);// Очистка поля результатов\r\n    const [inputValue, setInputValue] = React.useState(''); // Хранение и запись input\r\n    const [error, setError] = React.useState('');           // Ошибка при запросе к базе данных\r\n    const Api = new NewsApi({url:'https://nomoreparties.co/news/v2/', key:'2356832b0876432c8814987efd07620a'});\r\n  \r\n    \r\n    React.useEffect(() => {\r\n        const bodyClickHandler = (event: Event) => {\r\n            if (event.target instanceof HTMLElement) {\r\n                !event.target.closest('.Search') && setWillClear(true)\r\n            }\r\n            \r\n        }\r\n\r\n        document.body.addEventListener('click', (event) => bodyClickHandler(event));\r\n\r\n        return () => document.body.removeEventListener('click', (event) => bodyClickHandler(event));\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (isSent) {\r\n            if (inputValue === '') {\r\n                Api.getLastNews().then(res => {\r\n                    const news = res.articles.map((item:any, index:number) => {\r\n                        return {\r\n                            id: index,\r\n                            name: item.title,\r\n                            username: item.source.name,\r\n                            photo: item.urlToImage,\r\n                        }\r\n                    })\r\n                    setUresInfo(news);\r\n                    return news\r\n                })\r\n                .then((res) => {\r\n                    setTimeout(() => {\r\n                        setIsSent(false);\r\n                        setIsLoad(true);\r\n                    }, 100)\r\n                })\r\n                .catch(err => setError(err));\r\n            } else {\r\n                Api.getNews(inputValue).then(res => {\r\n                    const news = res.articles.map((item:any, index:number) => {\r\n                        return {\r\n                            id: index,\r\n                            name: item.title,\r\n                            username: item.source.name,\r\n                            photo: item.urlToImage,\r\n                        }\r\n                    })\r\n                    setUresInfo(news);\r\n                    return news\r\n                })\r\n                .then((res) => {\r\n                    setTimeout(() => {\r\n                        setIsSent(false);\r\n                        setIsLoad(true);\r\n                    }, 100)\r\n                })\r\n                .catch(err => setError(err));\r\n            }\r\n\r\n            \r\n        }\r\n    }, [isSent]);\r\n\r\n    return (\r\n        <div className=\"Search\">\r\n            <Bar\r\n                setIsSent={setIsSent}\r\n                setIsLoad={setIsLoad}\r\n                setWillClear={setWillClear}\r\n                setInputValue={setInputValue}\r\n                inputValue={inputValue}\r\n            />\r\n            <Results\r\n                errorMessage={error}\r\n                inputValue={inputValue}\r\n                setInputValue={setInputValue}\r\n                willClear={willClear}\r\n                setWillClear={setWillClear}\r\n                users={userInfo}\r\n                isSent={isSent}\r\n                isLoad={isLoad}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport Search from './components/search/Search';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Search/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}