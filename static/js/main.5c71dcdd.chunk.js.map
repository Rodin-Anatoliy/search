{"version":3,"sources":["components/user/User.tsx","components/results/Results.tsx","images/search.svg","components/bar/Bar.tsx","components/search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["User","props","className","onClick","e","preventDefault","setInputValue","name","setWillClear","src","avatar","alt","nick","Results","isLoad","userId","users","map","user","id","userPhoto","i","photo","length","includes","push","forEach","usersList","where","what","result","toLowerCase","matches","username","inputValue","thumbnailUrl","error","isSent","willClear","Bar","onSubmit","type","lens","value","autoComplete","onFocus","setIsSent","setIsLoad","onInput","event","currentTarget","inputHandler","placeholder","Search","React","useState","userInfo","setUresInfo","setUserPhoto","setError","getInfo","url","fetch","then","res","ok","json","Promise","reject","console","log","status","document","addEventListener","target","closest","useEffect","catch","err","setTimeout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c71dcdd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './User.css';\r\n\r\nfunction User(props: any) {\r\n    function clickHandler(event: any) {\r\n        event.preventDefault();\r\n        props.setInputValue(props.name);\r\n        props.setWillClear(true);\r\n    }\r\n\r\n    return (\r\n      <div className=\"User\" onClick={(e) => clickHandler(e)}>\r\n          <div className=\"User__avatar\">\r\n              <img src={props.avatar} alt=\"User avatar\"/>\r\n          </div>\r\n          <div className=\"User__info\">\r\n              <p className=\"User__name\">{props.name}</p>\r\n              <p className=\"User__nick\">{props.nick}</p>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport './Results.css';\r\nimport User from '../user/User';\r\n\r\nfunction Results(props: any) {\r\n    \r\n    if (props.isLoad) {\r\n\r\n        const userId = props.users.map((user: any) => {\r\n            return user.id\r\n        });\r\n\r\n        const userPhoto: any = [];\r\n        for (let i=0; i < props.photo.length; i++) {\r\n            if (userId.includes(props.photo[i].id)) {\r\n                userPhoto.push(props.photo[i]);\r\n\r\n            }\r\n            if (userPhoto.length === userId.length) {\r\n                break\r\n            }\r\n        }\r\n\r\n        props.users.forEach((user: any) => {\r\n            userPhoto.forEach((photo: any) => {\r\n                if (user.id === photo.id) {\r\n                    user.photo = photo\r\n                }\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    function matches(where: any, what: any) {\r\n        let result = false;\r\n        for (let i=0; i < where.length; i++) {\r\n            if (where[i].toLowerCase().includes(what.toLowerCase())) {\r\n                result = true;\r\n                break\r\n            } \r\n        }\r\n        return result\r\n    }\r\n\r\n    const usersList = props.isLoad && props.users.map((user: any) => {\r\n        if (matches([user.username, user.name], props.inputValue)) {\r\n            return <User setWillClear={props.setWillClear} inputValue={props.inputValue} setInputValue={props.setInputValue} name={user.name} nick={'@' + user.username} avatar={user.photo.thumbnailUrl} key={user.id}/>\r\n        } else {return null}\r\n    });\r\n\r\n    const error = `${props.error}`;\r\n    \r\n    return (\r\n      <div className={props.isSent ? \"Results Results__preloader\" : \"Results\"}>\r\n          {props.isLoad && !props.willClear && !props.error && usersList}\r\n          {!!props.error && (<p className=\"Results__error\">{error}</p>)}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Results;","export default __webpack_public_path__ + \"static/media/search.273f4b09.svg\";","import React from 'react';\r\nimport './Bar.css';\r\nimport lens from '../../images/search.svg'\r\n\r\nfunction Bar(props: any) {\r\n\r\n    function focusHandler() {\r\n        props.setIsSent(true);\r\n        props.setIsLoad(false);\r\n        props.setWillClear(false);\r\n    }\r\n\r\n    function inputHandler(event: any) {\r\n        let value = event.currentTarget.value;\r\n        props.setIsSent(true);\r\n        props.setIsLoad(false);\r\n        props.setWillClear(false);\r\n        props.setInputValue(value);\r\n    }\r\n\r\n    function submitHandler(event: any) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form className=\"Bar\" onSubmit={(e) => submitHandler(e)}>\r\n            <button type=\"submit\" className=\"Bar__submit\">\r\n                <img className=\"Bar__icon\" src={lens} alt=\"search icon\"/>\r\n            </button>\r\n            \r\n            <input \r\n                value={props.inputValue}\r\n                autoComplete=\"off\"\r\n                onFocus={() => {focusHandler()}}\r\n                onInput={(e) => {inputHandler(e)}}\r\n                name=\"text\"\r\n                type=\"text\"\r\n                className=\"Bar__input\"\r\n                placeholder=\"Search\"\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Bar;","import React from 'react';\r\nimport './Search.css';\r\nimport Results from '../results/Results';\r\nimport Bar from '../bar/Bar';\r\n\r\nfunction Search() {\r\n\r\n    \r\n    const [isSent, setIsSent] = React.useState(false);      // Отслеживание отправки запроса\r\n    const [isLoad, setIsLoad] = React.useState(false);      // Отслеживание загрузки ответа \r\n    const [userInfo, setUresInfo] = React.useState([]);     // Данные пользователя\r\n    const [userPhoto, setUserPhoto] = React.useState([]);   // Данные о фото пользователя\r\n    const [willClear, setWillClear] = React.useState(false);// Очистка поля результатов\r\n    const [inputValue, setInputValue] = React.useState(''); // Хранение и запись input\r\n    const [error, setError] = React.useState('');           // Ошибка при запросе к базе данных\r\n\r\n    function getInfo(url : any) {\r\n        return fetch(url)\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(console.log(`Ошибка: ${res.status}`));\r\n        })\r\n    }\r\n\r\n    document.addEventListener('click', (event: any) => {\r\n        !event.target.closest('.Search') && setWillClear(true)\r\n    })\r\n\r\n    React.useEffect(() => {\r\n        if (isSent) {\r\n\r\n            getInfo(`https://jsonplaceholder.typicode.com/users`)\r\n                .then(res => {\r\n                    setUresInfo(res);\r\n                })\r\n                .catch(err => setError(err));\r\n            ;\r\n\r\n            getInfo(`https://jsonplaceholder.typicode.com/photos`)\r\n                .then(res => {\r\n                    setUserPhoto(res);\r\n                    setTimeout(() => {\r\n                        setIsSent(false);\r\n                        setIsLoad(true);\r\n                    }, 100)\r\n                })\r\n                .catch(err => setError(err));\r\n            ;\r\n            \r\n        }\r\n    }, [isSent]);\r\n\r\n    return (\r\n        <div className=\"Search\">\r\n            <Bar\r\n                setIsSent={setIsSent}\r\n                setIsLoad={setIsLoad}\r\n                setWillClear={setWillClear}\r\n                setInputValue={setInputValue}\r\n                inputValue={inputValue}\r\n            />\r\n            <Results\r\n                error={error}\r\n                inputValue={inputValue}\r\n                setInputValue={setInputValue}\r\n                willClear={willClear}\r\n                setWillClear={setWillClear}\r\n                users={userInfo}\r\n                photo={userPhoto}\r\n                isSent={isSent}\r\n                isLoad={isLoad}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport Search from './components/search/Search';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}